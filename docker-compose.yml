version: "3"

services:
  server1:
    build:
      context: .
      dockerfile: services/server1/Dockerfile
    ports:
      - "8000:8000"
    environment:
      PG_PASS: root
      PG_USER: root
      PG_DB: database
      PG_HOST: postgres
      PG_PORT: 5432 
      MONGO_USER: root
      MONGO_PASS: example
      MONGO_HOST: mongo
      MONGO_PORT: 27017
      MONGO_DATABASE: example
    volumes:
      - "./:/code/"
    container_name: server1
    networks:
      - server-network
    
  server2:
    build:
      context: .
      dockerfile: services/server2/Dockerfile
    ports:
      - "8001:8000"
    environment:
      PG_PASS: root
      PG_USER: root
      PG_DB: database
      PG_HOST: postgres
      PG_PORT: 5432 
      MONGO_USER: root
      MONGO_PASS: example
      MONGO_HOST: mongo
      MONGO_PORT: 27017
      MONGO_DATABASE: example
    volumes:
      - "./:/code/"
    container_name: server2
    networks:
      - server-network

  server3:
    build:
      context: .
      dockerfile: services/server3/Dockerfile
    ports:
      - "8002:8000"
    environment:
      PG_PASS: root
      PG_USER: root
      PG_DB: database
      PG_HOST: postgres
      PG_PORT: 5432 
      MONGO_USER: root
      MONGO_PASS: example
      MONGO_HOST: mongo
      MONGO_PORT: 27017
      MONGO_DATABASE: example
    volumes:
      - "./:/code/"
    container_name: server3
    networks:
      - server-network

  logging:
    build:
      context: .
      dockerfile: services/logging/Dockerfile
    ports:
      - "8003:8000"
    environment:
      PG_PASS: root
      PG_USER: root
      PG_DB: database
      PG_HOST: postgres
      PG_PORT: 5432 
      MONGO_USER: root
      MONGO_PASS: example
      MONGO_HOST: mongo
      MONGO_PORT: 27017
      MONGO_DATABASE: example
    volumes:
      - "./:/code/"
    restart: on-failure:10
    container_name: logging
    networks:
      - server-network
    depends_on:
      - rabbitmq

  tables:
    build:
      context: .
      dockerfile: services/server1/Dockerfile
    environment:
      PG_PASS: root
      PG_USER: root
      PG_DB: database
      PG_HOST: postgres
      PG_PORT: 5432 
    volumes:
      - "./:/code/"
    container_name: tables
    entrypoint: bash -c "pip install -r services/server1/requirements.txt && python adapters/database/sql/create_table.py"
    networks:
      - server-network

  postgres:
    image: postgres
    restart: always
    ports:
      - "5432:5432"
    environment:
      POSTGRES_PASSWORD: root
      POSTGRES_USER: root
      POSTGRES_DB: database
    logging:
      driver: none
    networks:
      - server-network
    
  mongo:
    image: mongo
    restart: always
    ports:
      - "27017:27017"
    environment:
      MONGO_INITDB_ROOT_USERNAME: root
      MONGO_INITDB_ROOT_PASSWORD: example
    logging:
      driver: none
    networks:
      - server-network

  mongo-express:
    image: mongo-express
    restart: always
    ports:
      - 8081:8081
    environment:
      ME_CONFIG_MONGODB_ADMINUSERNAME: root
      ME_CONFIG_MONGODB_ADMINPASSWORD: example
      ME_CONFIG_MONGODB_URL: mongodb://root:example@mongo:27017/
      ME_CONFIG_BASICAUTH: 'false'
    logging:
      driver: none
    networks:
      - server-network

  rabbitmq:
    image: rabbitmq:3-management-alpine
    container_name: rabbitmq
    ports:
        - 5672:5672
        - 15672:15672
    volumes:
        - ~/.docker-conf/rabbitmq/data/:/var/lib/rabbitmq/
        - ~/.docker-conf/rabbitmq/log/:/var/log/rabbitmq
    networks:
      - server-network

networks:
  server-network:
    driver: bridge
